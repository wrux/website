---
import '@fontsource-variable/inter';

export interface Props {
  description: string;
  title: string;
}

const { description, title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <script
      defer
      data-api="/stats/api/event"
      data-domain="wrux.com"
      src="/stats/js/script.js"
    ></script>
    <script src="https://cdn.usefathom.com/script.js" data-site="HIFDIEQG" defer
    ></script>
    <!-- <script type="module" src={Astro.resolve('components/Test.js')}></script> -->
    <script
      src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"
      defer
    ></script>
  </head>
  <body>
    <toggle-theme class="mb-8"></toggle-theme>
    <slot />
  </body>
</html>

<style is:global>
  :root {
    --body-bg: white;
    --body-text: theme(colors.dark);

    --highlight-main: theme(colors.secondary);
    --highlight-accent: theme(colors.primary);
    --highlight-background: theme(colors.gray.100);
  }

  html.dark {
    --body-bg: black;
    --body-text: white;

    --highlight-main: theme(colors.primary);
    --highlight-accent: theme(colors.secondary);
    --highlight-background: theme(colors.dark);
  }

  html,
  body {
    max-width: 100vw;
    overflow-x: hidden;
    background-color: var(--body-bg);
    color: var(--body-text);
  }

  .link {
    @apply text-main underline decoration-current underline-offset-4 transition-colors hover:decoration-transparent;
  }
</style>

<script>
  const template = document.createElement('template');
  template.innerHTML = `
    <style>
      :host {
        display: inline-block;
        width: 56px;
        height: 28px;
        cursor: pointer;
      }

      span {
        box-sizing: border-box;
        display: inline-block;
        line-height: 1;
      }

      [part="track"] {
        width: 100%;
        height: 100%;
        background-color: #dddddd;
        text-align: left;
        border-radius: 9999rem;
      }

      [part="slider"] {
        width: 50%;
        height: 100%;
        background-color: #777777;
        vertical-align: text-top;
        border-radius: 9999rem;
      }

      [part="track"], [part="slider"] {
        transition: all 256ms;
      }

      :host([aria-checked="true"]) [part="slider"] {
        transform: translateX(100%);
      }
    </style>

    <span part="track">
      <span part="slider" class="rounded-full"></span>
    </span>
  `;

  export class ToggleSwitch extends HTMLElement {
    static elementName = 'toggle-theme';

    constructor() {
      super();

      this.attachShadow({ mode: 'open' }).appendChild(
        template.content.cloneNode(true)
      );
    }

    connectedCallback() {
      this.setAttribute('role', 'switch');
      this.setAttribute('tabindex', '0');
      this.addEventListener('click', this.toggle);
      this.setAttribute('aria-checked', this.isChecked().toString());
    }

    disconnectedCallback() {
      this.removeEventListener('click', this.toggle);
    }

    getTheme() {
      if (
        typeof localStorage !== 'undefined' &&
        localStorage.getItem('theme')
      ) {
        return localStorage.getItem('theme');
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light';
    }

    isChecked() {
      return this.getTheme() === 'dark';
    }

    toggle = () => {
      const theme = !this.isChecked() ? 'dark' : 'light';
      localStorage.setItem('theme', theme);
      this.setAttribute('aria-checked', this.isChecked().toString());
      document.documentElement.classList.toggle('dark', theme === 'dark');
    };
  }

  window.customElements.define(ToggleSwitch.elementName, ToggleSwitch);
</script>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light';
  })();

  document.documentElement.classList.toggle('dark', theme === 'dark');
  window.localStorage.setItem('theme', theme);
</script>
